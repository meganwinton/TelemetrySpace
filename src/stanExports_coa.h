// Generated by rstantools.  Do not edit by hand.

/*
    TelemetrySpace is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TelemetrySpace is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TelemetrySpace.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.36.0-112-g93cda2f
#include <stan/model/model_header.hpp>
namespace model_coa_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 47> locations_array__ =
  {" (found before start of program)",
  " (in 'coa', line 16, column 2 to column 37)",
  " (in 'coa', line 17, column 2 to column 25)",
  " (in 'coa', line 19, column 2 to column 66)",
  " (in 'coa', line 20, column 2 to column 66)",
  " (in 'coa', line 24, column 2 to column 10)",
  " (in 'coa', line 25, column 2 to column 13)",
  " (in 'coa', line 26, column 2 to column 40)",
  " (in 'coa', line 27, column 2 to column 25)",
  " (in 'coa', line 28, column 2 to column 33)",
  " (in 'coa', line 35, column 8 to line 38, column 10)",
  " (in 'coa', line 33, column 24 to line 39, column 7)",
  " (in 'coa', line 33, column 6 to line 39, column 7)",
  " (in 'coa', line 32, column 23 to line 40, column 5)",
  " (in 'coa', line 32, column 4 to line 40, column 5)",
  " (in 'coa', line 31, column 21 to line 41, column 3)",
  " (in 'coa', line 31, column 2 to line 41, column 3)",
  " (in 'coa', line 45, column 2 to column 26)",
  " (in 'coa', line 46, column 2 to column 26)",
  " (in 'coa', line 52, column 8 to column 84)",
  " (in 'coa', line 50, column 24 to line 53, column 7)",
  " (in 'coa', line 50, column 6 to line 53, column 7)",
  " (in 'coa', line 49, column 22 to line 54, column 5)",
  " (in 'coa', line 49, column 4 to line 54, column 5)",
  " (in 'coa', line 48, column 21 to line 55, column 3)",
  " (in 'coa', line 48, column 2 to line 55, column 3)",
  " (in 'coa', line 3, column 2 to column 23)",
  " (in 'coa', line 4, column 2 to column 23)",
  " (in 'coa', line 5, column 2 to column 24)",
  " (in 'coa', line 6, column 2 to column 25)",
  " (in 'coa', line 7, column 8 to column 13)",
  " (in 'coa', line 7, column 15 to column 20)",
  " (in 'coa', line 7, column 22 to column 28)",
  " (in 'coa', line 7, column 2 to column 49)",
  " (in 'coa', line 8, column 8 to column 13)",
  " (in 'coa', line 8, column 2 to column 26)",
  " (in 'coa', line 9, column 8 to column 13)",
  " (in 'coa', line 9, column 2 to column 26)",
  " (in 'coa', line 10, column 2 to column 22)",
  " (in 'coa', line 11, column 2 to column 22)",
  " (in 'coa', line 19, column 8 to column 13)",
  " (in 'coa', line 19, column 15 to column 21)",
  " (in 'coa', line 20, column 8 to column 13)",
  " (in 'coa', line 20, column 15 to column 21)",
  " (in 'coa', line 26, column 8 to column 13)",
  " (in 'coa', line 26, column 15 to column 20)",
  " (in 'coa', line 26, column 22 to column 28)"};
#include <stan_meta_header.hpp>
class model_coa final : public model_base_crtp<model_coa> {
private:
  int n_ind;
  int n_rec;
  int n_time;
  int n_trans;
  std::vector<std::vector<std::vector<int>>> det;
  std::vector<double> rec_x;
  std::vector<double> rec_y;
  std::vector<double> lim_x;
  std::vector<double> lim_y;
public:
  ~model_coa() {}
  model_coa(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_coa_namespace::model_coa";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization", "n_ind", "int",
        std::vector<size_t>{});
      n_ind = std::numeric_limits<int>::min();
      current_statement__ = 26;
      n_ind = context__.vals_i("n_ind")[(1 - 1)];
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "n_ind", n_ind, 0);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "n_rec", "int",
        std::vector<size_t>{});
      n_rec = std::numeric_limits<int>::min();
      current_statement__ = 27;
      n_rec = context__.vals_i("n_rec")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "n_rec", n_rec, 0);
      current_statement__ = 28;
      context__.validate_dims("data initialization", "n_time", "int",
        std::vector<size_t>{});
      n_time = std::numeric_limits<int>::min();
      current_statement__ = 28;
      n_time = context__.vals_i("n_time")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "n_time", n_time, 0);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "n_trans", "int",
        std::vector<size_t>{});
      n_trans = std::numeric_limits<int>::min();
      current_statement__ = 29;
      n_trans = context__.vals_i("n_trans")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "n_trans", n_trans, 0);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("det", "n_ind", n_ind);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("det", "n_rec", n_rec);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("det", "n_time", n_time);
      current_statement__ = 33;
      context__.validate_dims("data initialization", "det", "int",
        std::vector<size_t>{static_cast<size_t>(n_ind),
          static_cast<size_t>(n_rec), static_cast<size_t>(n_time)});
      det = std::vector<std::vector<std::vector<int>>>(n_ind,
              std::vector<std::vector<int>>(n_rec,
                std::vector<int>(n_time, std::numeric_limits<int>::min())));
      {
        std::vector<int> det_flat__;
        current_statement__ = 33;
        det_flat__ = context__.vals_i("det");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_rec; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n_ind; ++sym3__) {
              stan::model::assign(det, det_flat__[(pos__ - 1)],
                "assigning variable det", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "det", det, 0);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("rec_x", "n_rec", n_rec);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "rec_x", "double",
        std::vector<size_t>{static_cast<size_t>(n_rec)});
      rec_x = std::vector<double>(n_rec,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 35;
      rec_x = context__.vals_r("rec_x");
      current_statement__ = 36;
      stan::math::validate_non_negative_index("rec_y", "n_rec", n_rec);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "rec_y", "double",
        std::vector<size_t>{static_cast<size_t>(n_rec)});
      rec_y = std::vector<double>(n_rec,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 37;
      rec_y = context__.vals_r("rec_y");
      current_statement__ = 38;
      context__.validate_dims("data initialization", "lim_x", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      lim_x = std::vector<double>(2,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 38;
      lim_x = context__.vals_r("lim_x");
      current_statement__ = 39;
      context__.validate_dims("data initialization", "lim_y", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      lim_y = std::vector<double>(2,
                std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 39;
      lim_y = context__.vals_r("lim_y");
      current_statement__ = 40;
      stan::math::validate_non_negative_index("x", "n_ind", n_ind);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("x", "n_time", n_time);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("y", "n_ind", n_ind);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("y", "n_time", n_time);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("dist", "n_ind", n_ind);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("dist", "n_rec", n_rec);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("dist", "n_time", n_time);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + (n_ind * n_time) + (n_ind * n_time);
  }
  inline std::string model_name() const final {
    return "model_coa";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.36.0-112-g93cda2f",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_coa_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto alpha0 =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(-(7),
          7, lp__);
      current_statement__ = 2;
      auto alpha1 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto x =
        in__.template read_constrain_lub<
          std::vector<std::vector<local_scalar_t__>>,
          jacobian__>(stan::model::rvalue(lim_x, "lim_x",
                        stan::model::index_uni(1)),
          stan::model::rvalue(lim_x, "lim_x", stan::model::index_uni(2)),
          lp__, n_ind, n_time);
      current_statement__ = 4;
      auto y =
        in__.template read_constrain_lub<
          std::vector<std::vector<local_scalar_t__>>,
          jacobian__>(stan::model::rvalue(lim_y, "lim_y",
                        stan::model::index_uni(1)),
          stan::model::rvalue(lim_y, "lim_y", stan::model::index_uni(2)),
          lp__, n_ind, n_time);
      local_scalar_t__ p0 = DUMMY_VAR__;
      local_scalar_t__ sigma = DUMMY_VAR__;
      std::vector<std::vector<std::vector<local_scalar_t__>>> dist =
        std::vector<std::vector<std::vector<local_scalar_t__>>>(n_ind,
          std::vector<std::vector<local_scalar_t__>>(n_rec,
            std::vector<local_scalar_t__>(n_time, DUMMY_VAR__)));
      current_statement__ = 8;
      p0 = stan::math::inv_logit(alpha0);
      current_statement__ = 9;
      sigma = stan::math::sqrt((1 / (2 * alpha1)));
      current_statement__ = 16;
      for (int t = 1; t <= n_time; ++t) {
        current_statement__ = 14;
        for (int i = 1; i <= n_ind; ++i) {
          current_statement__ = 12;
          for (int j = 1; j <= n_rec; ++j) {
            current_statement__ = 10;
            stan::model::assign(dist,
              stan::math::sqrt(
                (stan::math::square(
                   (stan::model::rvalue(x, "x", stan::model::index_uni(i),
                      stan::model::index_uni(t)) -
                   stan::model::rvalue(rec_x, "rec_x",
                     stan::model::index_uni(j)))) +
                stan::math::square(
                  (stan::model::rvalue(y, "y", stan::model::index_uni(i),
                     stan::model::index_uni(t)) -
                  stan::model::rvalue(rec_y, "rec_y",
                    stan::model::index_uni(j)))))),
              "assigning variable dist", stan::model::index_uni(i),
              stan::model::index_uni(j), stan::model::index_uni(t));
          }
        }
      }
      {
        current_statement__ = 17;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(alpha0, 0, 2.5));
        current_statement__ = 18;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(alpha1, 0, 2.5));
        current_statement__ = 25;
        for (int t = 1; t <= n_time; ++t) {
          current_statement__ = 23;
          for (int i = 1; i <= n_ind; ++i) {
            current_statement__ = 21;
            for (int j = 1; j <= n_rec; ++j) {
              current_statement__ = 19;
              lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                               stan::model::rvalue(det, "det",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(j),
                                 stan::model::index_uni(t)), n_trans, (p0 *
                               stan::math::exp((-(alpha1) *
                                 stan::math::square(
                                   stan::model::rvalue(dist, "dist",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(j),
                                     stan::model::index_uni(t))))))));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_coa_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto alpha0 =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(-(7),
          7, lp__);
      current_statement__ = 2;
      auto alpha1 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto x =
        in__.template read_constrain_lub<
          std::vector<std::vector<local_scalar_t__>>,
          jacobian__>(stan::model::rvalue(lim_x, "lim_x",
                        stan::model::index_uni(1)),
          stan::model::rvalue(lim_x, "lim_x", stan::model::index_uni(2)),
          lp__, n_ind, n_time);
      current_statement__ = 4;
      auto y =
        in__.template read_constrain_lub<
          std::vector<std::vector<local_scalar_t__>>,
          jacobian__>(stan::model::rvalue(lim_y, "lim_y",
                        stan::model::index_uni(1)),
          stan::model::rvalue(lim_y, "lim_y", stan::model::index_uni(2)),
          lp__, n_ind, n_time);
      local_scalar_t__ p0 = DUMMY_VAR__;
      local_scalar_t__ sigma = DUMMY_VAR__;
      std::vector<std::vector<std::vector<local_scalar_t__>>> dist =
        std::vector<std::vector<std::vector<local_scalar_t__>>>(n_ind,
          std::vector<std::vector<local_scalar_t__>>(n_rec,
            std::vector<local_scalar_t__>(n_time, DUMMY_VAR__)));
      current_statement__ = 8;
      p0 = stan::math::inv_logit(alpha0);
      current_statement__ = 9;
      sigma = stan::math::sqrt((1 / (2 * alpha1)));
      current_statement__ = 16;
      for (int t = 1; t <= n_time; ++t) {
        current_statement__ = 14;
        for (int i = 1; i <= n_ind; ++i) {
          current_statement__ = 12;
          for (int j = 1; j <= n_rec; ++j) {
            current_statement__ = 10;
            stan::model::assign(dist,
              stan::math::sqrt(
                (stan::math::square(
                   (stan::model::rvalue(x, "x", stan::model::index_uni(i),
                      stan::model::index_uni(t)) -
                   stan::model::rvalue(rec_x, "rec_x",
                     stan::model::index_uni(j)))) +
                stan::math::square(
                  (stan::model::rvalue(y, "y", stan::model::index_uni(i),
                     stan::model::index_uni(t)) -
                  stan::model::rvalue(rec_y, "rec_y",
                    stan::model::index_uni(j)))))),
              "assigning variable dist", stan::model::index_uni(i),
              stan::model::index_uni(j), stan::model::index_uni(t));
          }
        }
      }
      {
        current_statement__ = 17;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(alpha0, 0, 2.5));
        current_statement__ = 18;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(alpha1, 0, 2.5));
        current_statement__ = 25;
        for (int t = 1; t <= n_time; ++t) {
          current_statement__ = 23;
          for (int i = 1; i <= n_ind; ++i) {
            current_statement__ = 21;
            for (int j = 1; j <= n_rec; ++j) {
              current_statement__ = 19;
              lp_accum__.add(stan::math::binomial_lpmf<propto__>(
                               stan::model::rvalue(det, "det",
                                 stan::model::index_uni(i),
                                 stan::model::index_uni(j),
                                 stan::model::index_uni(t)), n_trans, (p0 *
                               stan::math::exp((-(alpha1) *
                                 stan::math::square(
                                   stan::model::rvalue(dist, "dist",
                                     stan::model::index_uni(i),
                                     stan::model::index_uni(j),
                                     stan::model::index_uni(t))))))));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_coa_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto alpha0 =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(-(7),
          7, lp__);
      current_statement__ = 2;
      auto alpha1 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto x =
        in__.template read_constrain_lub<
          std::vector<std::vector<local_scalar_t__>>,
          jacobian__>(stan::model::rvalue(lim_x, "lim_x",
                        stan::model::index_uni(1)),
          stan::model::rvalue(lim_x, "lim_x", stan::model::index_uni(2)),
          lp__, n_ind, n_time);
      current_statement__ = 4;
      auto y =
        in__.template read_constrain_lub<
          std::vector<std::vector<local_scalar_t__>>,
          jacobian__>(stan::model::rvalue(lim_y, "lim_y",
                        stan::model::index_uni(1)),
          stan::model::rvalue(lim_y, "lim_y", stan::model::index_uni(2)),
          lp__, n_ind, n_time);
      double p0 = std::numeric_limits<double>::quiet_NaN();
      double sigma = std::numeric_limits<double>::quiet_NaN();
      std::vector<std::vector<std::vector<double>>> dist =
        std::vector<std::vector<std::vector<double>>>(n_ind,
          std::vector<std::vector<double>>(n_rec,
            std::vector<double>(n_time,
              std::numeric_limits<double>::quiet_NaN())));
      out__.write(alpha0);
      out__.write(alpha1);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
          out__.write(x[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
          out__.write(y[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 8;
      p0 = stan::math::inv_logit(alpha0);
      current_statement__ = 9;
      sigma = stan::math::sqrt((1 / (2 * alpha1)));
      current_statement__ = 16;
      for (int t = 1; t <= n_time; ++t) {
        current_statement__ = 14;
        for (int i = 1; i <= n_ind; ++i) {
          current_statement__ = 12;
          for (int j = 1; j <= n_rec; ++j) {
            current_statement__ = 10;
            stan::model::assign(dist,
              stan::math::sqrt(
                (stan::math::square(
                   (stan::model::rvalue(x, "x", stan::model::index_uni(i),
                      stan::model::index_uni(t)) -
                   stan::model::rvalue(rec_x, "rec_x",
                     stan::model::index_uni(j)))) +
                stan::math::square(
                  (stan::model::rvalue(y, "y", stan::model::index_uni(i),
                     stan::model::index_uni(t)) -
                  stan::model::rvalue(rec_y, "rec_y",
                    stan::model::index_uni(j)))))),
              "assigning variable dist", stan::model::index_uni(i),
              stan::model::index_uni(j), stan::model::index_uni(t));
          }
        }
      }
      if (emit_transformed_parameters__) {
        out__.write(p0);
        out__.write(sigma);
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_rec; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= n_ind; ++sym3__) {
              out__.write(dist[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ alpha0 = DUMMY_VAR__;
      current_statement__ = 1;
      alpha0 = in__.read<local_scalar_t__>();
      out__.write_free_lub(-(7), 7, alpha0);
      local_scalar_t__ alpha1 = DUMMY_VAR__;
      current_statement__ = 2;
      alpha1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha1);
      std::vector<std::vector<local_scalar_t__>> x =
        std::vector<std::vector<local_scalar_t__>>(n_ind,
          std::vector<local_scalar_t__>(n_time, DUMMY_VAR__));
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
          current_statement__ = 3;
          x[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write_free_lub(stan::model::rvalue(lim_x, "lim_x",
                             stan::model::index_uni(1)),
        stan::model::rvalue(lim_x, "lim_x", stan::model::index_uni(2)), x);
      std::vector<std::vector<local_scalar_t__>> y =
        std::vector<std::vector<local_scalar_t__>>(n_ind,
          std::vector<local_scalar_t__>(n_time, DUMMY_VAR__));
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
          current_statement__ = 4;
          y[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write_free_lub(stan::model::rvalue(lim_y, "lim_y",
                             stan::model::index_uni(1)),
        stan::model::rvalue(lim_y, "lim_y", stan::model::index_uni(2)), y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha0", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "alpha1", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(n_ind),
          static_cast<size_t>(n_time)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(n_ind),
          static_cast<size_t>(n_time)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ alpha0 = DUMMY_VAR__;
      current_statement__ = 1;
      alpha0 = context__.vals_r("alpha0")[(1 - 1)];
      out__.write_free_lub(-(7), 7, alpha0);
      local_scalar_t__ alpha1 = DUMMY_VAR__;
      current_statement__ = 2;
      alpha1 = context__.vals_r("alpha1")[(1 - 1)];
      out__.write_free_lb(0, alpha1);
      std::vector<std::vector<local_scalar_t__>> x =
        std::vector<std::vector<local_scalar_t__>>(n_ind,
          std::vector<local_scalar_t__>(n_time, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 3;
        x_flat__ = context__.vals_r("x");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lub(stan::model::rvalue(lim_x, "lim_x",
                             stan::model::index_uni(1)),
        stan::model::rvalue(lim_x, "lim_x", stan::model::index_uni(2)), x);
      std::vector<std::vector<local_scalar_t__>> y =
        std::vector<std::vector<local_scalar_t__>>(n_ind,
          std::vector<local_scalar_t__>(n_time, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 4;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
            stan::model::assign(y, y_flat__[(pos__ - 1)],
              "assigning variable y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lub(stan::model::rvalue(lim_y, "lim_y",
                             stan::model::index_uni(1)),
        stan::model::rvalue(lim_y, "lim_y", stan::model::index_uni(2)), y);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha0", "alpha1", "x", "y"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"p0", "sigma", "dist"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(n_ind),
                  static_cast<size_t>(n_time)},
                std::vector<size_t>{static_cast<size_t>(n_ind),
                  static_cast<size_t>(n_time)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(n_ind),
               static_cast<size_t>(n_rec), static_cast<size_t>(n_time)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha0");
    param_names__.emplace_back(std::string() + "alpha1");
    for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
        param_names__.emplace_back(std::string() + "y" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "p0");
      param_names__.emplace_back(std::string() + "sigma");
      for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rec; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_ind; ++sym3__) {
            param_names__.emplace_back(std::string() + "dist" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "alpha0");
    param_names__.emplace_back(std::string() + "alpha1");
    for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_ind; ++sym2__) {
        param_names__.emplace_back(std::string() + "y" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "p0");
      param_names__.emplace_back(std::string() + "sigma");
      for (int sym1__ = 1; sym1__ <= n_time; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_rec; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= n_ind; ++sym3__) {
            param_names__.emplace_back(std::string() + "dist" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_ind) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_time) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_ind) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_time) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"dist\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_ind) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_rec) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_time) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_ind) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_time) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_ind) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_time) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"dist\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_ind) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_rec) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_time) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + (n_ind * n_time)) + (n_ind *
      n_time));
    const size_t num_transformed = emit_transformed_parameters * (((1 + 1) +
      (n_ind * (n_rec * n_time))));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + (n_ind * n_time)) + (n_ind *
      n_time));
    const size_t num_transformed = emit_transformed_parameters * (((1 + 1) +
      (n_ind * (n_rec * n_time))));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_coa_namespace::model_coa;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_coa_namespace::profiles__;
}
#endif
#endif

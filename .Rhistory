# Rename hour to time for consistency when plotting below
test.agg$time <- test.agg$hour
test.agg
ntest <- length( unique(test.agg$Transmitter) ) # number of individual tags (here just the one test tag)
nrec <- nrow(rlocs) # number of receivers
tsteps <- max(test.agg$hour)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
testY=array( NA, dim=c( ntest, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(testY) ){
h1 <- test.agg[test.agg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
testY[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,4], numeric(0)),0, h1[h1$hour==t & h1$rec==j,4])
}
}
}
testY
head(test.agg)
head(fish.agg)
sampling occasion (array elements)
testY=array( NA, dim=c( ntest, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(testY) ){
h1 <- test.agg[test.agg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
testY[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,6], numeric(0)),0, h1[h1$hour==t & h1$rec==j,6])
}
}
}
testY
head(test.agg)
fishdat$rec <- as.numeric(substr(fishdat$Station, 3, 4))
fishdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
fish.agg <- aggregate(count ~ Transmitter + rec + east + north + hour, fishdat, sum)
# Create a numeric identifier for each transmitter
fish.agg$tag <- as.numeric(as.factor(fish.agg$Transmitter))
# Rename hour to time for consistency when plotting below
fish.agg$time <- fish.agg$hour
head(fish.agg)
nind <- length( unique(fish.agg$Transmitter) ) # number of individual tags (here just the one test tag)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
Y=array( NA, dim=c( nind, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(Y) ){
h1 <- fish.agg[fish.agg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
Y[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,6], numeric(0)),0, h1[h1$hour==t & h1$rec==j,6])
}
}
}
Y
fish.agg
fit <- COA_Standard(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=Y,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) #
fit$Time
ew <- list(NA)
ns <- list(NA)
EN <- list(NA)
for (i in 1:nind){
ew[[i]] <- dplyr::select(fit$All_estimates, dplyr::starts_with( paste("sx[",i,",", sep='') ) )
ns[[i]] <- dplyr::select(fit$All_estimates, dplyr::starts_with( paste("sy[",i,",", sep='') ) )
# Merge them into one dataframe
EN[[i]]=cbind(data.table::melt(ew[[i]]),data.table::melt(ns[[i]])[,2])
EN[[i]]$id=as.numeric(EN[[i]]$variable) # The ID field corresponds to the time step.
colnames(EN[[i]])=c('variable','x','y','time')
}
# You will get a warning about 'No id variables' - don't worry about it.
## Plot posterior estimates
# Select individual for plotting
post <- EN[[1]]
coa <- as.data.frame(fit$COAs[,,1])
# Plot in ggplot
plotCOAs <- ggplot(aes(x=x,y=y),data=post) +
geom_hex(alpha=1,bins=100)  +
geom_point(aes(x=x,y=y),data=coa,pch=25,cex=1.5,alpha=.8,fill=NA) +
facet_wrap(~time,ncol=2) +
scale_fill_gradientn(colours=c("white","blue"),name = "Frequency",na.value=NA) +
geom_point(aes(x=east,y=north),data=rlocs,cex=1) +
geom_point(aes(x=east,y=north),data=fish.agg,pch=21,cex=1.5,fill='#00BFC4') +
# Unhash line below to include test tag location
#geom_point(aes(x=east,y=north),data=testloc,cex=1.5,pch=21,fill='#F8766D') +
coord_fixed(xlim=c(-1,1),ylim=c(-0.5,1.5)) +
scale_x_continuous(breaks = c(-1, 0, 1)) +
#scale_y_continuous(breaks = c(-1, 0, 1)) +
theme(legend.position="none") +
labs(x='East-West (km)',y='North-South (km)')
plotCOAs
nsentinal <- 1
fit_tag <- COA_TagInt(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntest=nsentinal, # number of test tags
ntrans=30, # number of expected transmissions per tag per time interval
y=Y,   # array of detections from tagged fish
test=testY, # array of detections from test tags
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim, # N-S boundary of spatial extent (receiver array + buffer)
testX=array(testloc$east,dim=c(nsentinal)),
testY=array(testloc$north,dim=c(nsentinal)))
fit_tag$Time
ew <- list(NA)
ns <- list(NA)
EN <- list(NA)
for (i in 1:nind){
ew[[i]] <- dplyr::select(fit_tag$All_estimates, dplyr::starts_with( paste("sx[",i,",", sep='') ) )
ns[[i]] <- dplyr::select(fit_tag$All_estimates, dplyr::starts_with( paste("sy[",i,",", sep='') ) )
# Merge them into one dataframe
EN[[i]]=cbind(data.table::melt(ew[[i]]),data.table::melt(ns[[i]])[,2])
EN[[i]]$id=as.numeric(EN[[i]]$variable) # The ID field corresponds to the time step.
colnames(EN[[i]])=c('variable','x','y','time')
}
# You will get a warning about 'No id variables' - don't worry about it.
## Plot posterior estimates
# Select individual for plotting
post <- EN[[1]]
coa <- as.data.frame(fit_tag$COAs[,,1])
# Plot in ggplot
plotTagInt <- ggplot(aes(x=x,y=y),data=post) +
geom_hex(alpha=1,bins=100)  +
geom_point(aes(x=x,y=y),data=coa,pch=25,cex=1.5,alpha=.8,fill=NA) +
facet_wrap(~time,ncol=2) +
scale_fill_gradientn(colours=c("white","blue"),name = "Frequency",na.value=NA) +
geom_point(aes(x=east,y=north),data=rlocs,cex=1) +
geom_point(aes(x=east,y=north),data=fish.agg,pch=21,cex=1.5,fill='#00BFC4') +
# Unhash line below to plot test tag location
#geom_point(aes(x=east,y=north),data=testloc,cex=1.5,pch=21,fill='#F8766D') +
coord_fixed(xlim=c(-1,1),ylim=c(-0.5,1.5)) +
scale_x_continuous(breaks = c(-1, 0, 1)) +
#scale_y_continuous(breaks = c(-1, 0, 1)) +
theme(legend.position="none") +
labs(x='East-West (km)',y='North-South (km)')
plotTagInt
COA=as.data.frame(aggregate(east~hour,data=fishdat,FUN=mean))
COAy=aggregate(north~hour,data=fishdat,FUN=mean)
COA$north=COAy[,2]
head(COA)
summary(COA)
COA
mw <- ggplot () +
geom_point(aes(x=east,y=north),fill='NA',data=COA,pch=25,cex=1.5,alpha=.8) +
facet_wrap(~hour,ncol=2) +
geom_point(aes(x=east,y=north),data=rlocs,cex=1) +
#geom_point(aes(x=east,y=north),data=testloc,cex=1.5,pch=21,fill='#F8766D') +
geom_point(aes(x=east,y=north),data=fishdat,pch=21,cex=1.5,fill='#00BFC4') +
coord_fixed(xlim=c(-1,1),ylim=c(-0.5,1.5)) +
scale_x_continuous(breaks = c(-1, 0, 1)) +
#scale_y_continuous(breaks = c(-1, 0, 1)) +
theme(legend.position="none") +
labs(x='East-West (km)',y='North-South (km)')
mw
library(ggpubr)
peez = ggarrange(mw, plotCOAs, plotTagInt,
labels = c("(a) Mean-weighted", "(b) Spatial point process", "(c) Test tag-integrated"),
ncol = 3, nrow = 1,
align = "hv", hjust = -0.15,
#widths = c(8,8,8), heights = c(2,2,2),
common.legend = F)
tiff(file = "TestTag_COA_examples.tiff", width = 8, height = 7.5, units = "in", res = 800)
peez
dev.off()
mw <- ggplot () +
geom_point(aes(x=east,y=north),fill='NA',data=COA,pch=25,cex=1.5,alpha=.8) +
facet_wrap(~hour,ncol=2) +
geom_point(aes(x=east,y=north),data=rlocs,cex=1) +
geom_point(aes(x=east,y=north),data=testloc,cex=1.5,pch=21,fill='#F8766D') +
geom_point(aes(x=east,y=north),data=fishdat,pch=21,cex=1.5,fill='#00BFC4') +
coord_fixed(xlim=c(-1,1),ylim=c(-0.5,1.5)) +
scale_x_continuous(breaks = c(-1, 0, 1)) +
#scale_y_continuous(breaks = c(-1, 0, 1)) +
theme(legend.position="none") +
labs(x='East-West (km)',y='North-South (km)')
ew <- list(NA)
ns <- list(NA)
EN <- list(NA)
for (i in 1:nind){
ew[[i]] <- dplyr::select(fit$All_estimates, dplyr::starts_with( paste("sx[",i,",", sep='') ) )
ns[[i]] <- dplyr::select(fit$All_estimates, dplyr::starts_with( paste("sy[",i,",", sep='') ) )
# Merge them into one dataframe
EN[[i]]=cbind(data.table::melt(ew[[i]]),data.table::melt(ns[[i]])[,2])
EN[[i]]$id=as.numeric(EN[[i]]$variable) # The ID field corresponds to the time step.
colnames(EN[[i]])=c('variable','x','y','time')
}
# You will get a warning about 'No id variables' - don't worry about it.
## Plot posterior estimates
# Select individual for plotting
post <- EN[[1]]
coa <- as.data.frame(fit$COAs[,,1])
plotCOAs <- ggplot(aes(x=x,y=y),data=post) +
geom_hex(alpha=1,bins=100)  +
geom_point(aes(x=x,y=y),data=coa,pch=25,cex=1.5,alpha=.8,fill=NA) +
facet_wrap(~time,ncol=2) +
scale_fill_gradientn(colours=c("white","blue"),name = "Frequency",na.value=NA) +
geom_point(aes(x=east,y=north),data=rlocs,cex=1) +
geom_point(aes(x=east,y=north),data=fish.agg,pch=21,cex=1.5,fill='#00BFC4') +
# Unhash line below to include test tag location
geom_point(aes(x=east,y=north),data=testloc,cex=1.5,pch=21,fill='#F8766D') +
coord_fixed(xlim=c(-1,1),ylim=c(-0.5,1.5)) +
scale_x_continuous(breaks = c(-1, 0, 1)) +
#scale_y_continuous(breaks = c(-1, 0, 1)) +
theme(legend.position="none") +
labs(x='East-West (km)',y='North-South (km)')
plotCOAs
ew <- list(NA)
ns <- list(NA)
EN <- list(NA)
for (i in 1:nind){
ew[[i]] <- dplyr::select(fit_tag$All_estimates, dplyr::starts_with( paste("sx[",i,",", sep='') ) )
ns[[i]] <- dplyr::select(fit_tag$All_estimates, dplyr::starts_with( paste("sy[",i,",", sep='') ) )
# Merge them into one dataframe
EN[[i]]=cbind(data.table::melt(ew[[i]]),data.table::melt(ns[[i]])[,2])
EN[[i]]$id=as.numeric(EN[[i]]$variable) # The ID field corresponds to the time step.
colnames(EN[[i]])=c('variable','x','y','time')
}
# You will get a warning about 'No id variables' - don't worry about it.
## Plot posterior estimates
# Select individual for plotting
post <- EN[[1]]
coa <- as.data.frame(fit_tag$COAs[,,1])
plotTagInt <- ggplot(aes(x=x,y=y),data=post) +
geom_hex(alpha=1,bins=100)  +
geom_point(aes(x=x,y=y),data=coa,pch=25,cex=1.5,alpha=.8,fill=NA) +
facet_wrap(~time,ncol=2) +
scale_fill_gradientn(colours=c("white","blue"),name = "Frequency",na.value=NA) +
geom_point(aes(x=east,y=north),data=rlocs,cex=1) +
geom_point(aes(x=east,y=north),data=fish.agg,pch=21,cex=1.5,fill='#00BFC4') +
# Unhash line below to plot test tag location
geom_point(aes(x=east,y=north),data=testloc,cex=1.5,pch=21,fill='#F8766D') +
coord_fixed(xlim=c(-1,1),ylim=c(-0.5,1.5)) +
scale_x_continuous(breaks = c(-1, 0, 1)) +
#scale_y_continuous(breaks = c(-1, 0, 1)) +
theme(legend.position="none") +
labs(x='East-West (km)',y='North-South (km)')
plotTagInt
mw
peez = ggarrange(mw, plotCOAs, plotTagInt,
labels = c("(a) Mean-weighted", "(b) Spatial point process", "(c) Test tag-integrated"),
ncol = 3, nrow = 1,
align = "hv", hjust = -0.15,
#widths = c(8,8,8), heights = c(2,2,2),
common.legend = F)
tiff(file = "TestTag_COA_examples.tiff", width = 8, height = 7.5, units = "in", res = 800)
peez
dev.off()
library(TelemetrySpace)
rlocs # Receiver locations
testloc # Test tag location
head(testdat) # Hourly detection data from the test tag
head(fishdat)
fishdat$rec <- as.numeric(substr(fishdat$Station, 3, 4))
fishdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
fish.agg <- aggregate(count ~ Transmitter + rec + east + north + hour, fishdat, sum)
# Create a numeric identifier for each transmitter
fish.agg$tag <- as.numeric(as.factor(fish.agg$Transmitter))
# Rename hour to time for consistency when plotting below
fish.agg$time <- fish.agg$hour
fish.agg
m1 <- plyr::count(testdat, c('Station','hour','D','east','north'))
m1 <- plyr::count(testdat, c('Station','hour','D','east','north'))
head(fishdat)
m1 <- plyr::count(fishdat, c('Station','hour',))
m1 <- plyr::count(fishdat, c('Station','hour'))
head(m1)
head(fish.agg)
table(fishdat$Station,fishdat$hour)
table(fish$hour,fishdat$Station)
table(fishdat$hour,fishdat$Station)
fishtab = table(fishdat$hour,fishdat$Station)
fishtab
head(fishtab)
write.csv(fishtab,'seabasstally.csv')
if (!require(devtools)) {
install.packages("devtools")
library(devtools)
}
install_github("meganwinton/TelemetrySpace", build_vignettes = FALSE)
if (!require(devtools)) {
install.packages("devtools")
library(devtools)
}
install_github("meganwinton/TelemetrySpace", build_vignettes = TRUE)
if (!require(devtools)) {
install.packages("devtools")
library(devtools)
}
install_github("meganwinton/TelemetrySpace", build_vignettes = FALSE)
library(TelemetrySpace)
?COA_Standard
?COA_TagInt
library(TelemetrySpace)
rlocs # Receiver locations
testloc # Test tag location
head(testdat) # Hourly detection data from the test tag
head(fishdat) # Ho
buffer=1
xlim=c(min(rlocs$east-buffer),max(rlocs$east+buffer))
ylim=c(min(rlocs$north-buffer),max(rlocs$north+buffer))
D<-NULL
# Loop over each hour
for( i in 1:nrow(testdat) ){
D[i]=distf( testloc[,c('east','north')], testdat[i,c('east','north')] )
}
testdat$D <- D # Assign to testdat data frame
# Plot to examine variation in detection rate over time
m1 <- plyr::count(testdat, c('Station','hour','D','east','north'))
#Round distance for plotting
m1$dist=round(m1$D*1000)
#Create label by merging station name and distance
m1$label=paste(m1$dist,"m","(",m1$Station,")")
#Plot
library(ggplot2)
ggplot(data=m1,aes(x=hour,y=freq))+
geom_bar(stat="identity",fill='#008080')+
facet_wrap(~as.factor(label))+
theme(text = element_text(size = 16)) +
scale_y_continuous(breaks=seq(0,30,10)) +
labs(x="Hours since deployment",y="Number of detections")
rs <- rlocs
# Add column for each time interval to indicate whether receiver was operational or not
rs[,c(4:( max(fishdat$hour)+3 ) )] <- 1
rs <- plyr::rename( rs, replace = c("V4"=1,
"V5"=2,
"V6"=3,
"V7"=4,
"V8"=5,
"V9"=6,
"V10"=7,
"V11"=8,
"V12"=9,
"V13"=10) )
# Create vector of the number of sampling occasions for each receiver
tsteps <- apply(rs[,4:ncol(rs)],1,sum)
tsteps # Will all be the same here beca
testdat$rec <- as.numeric(substr(testdat$Station, 3, 4))
testdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
test.agg <- aggregate(count ~ Transmitter + rec + east + north + hour, testdat, sum)
# Create a numeric identifier for each transmitter
test.agg$tag <- as.numeric(as.factor(test.agg$Transmitter))
# Rename hour to time for consistency when plotting below
test.agg$time <- test.agg$hour
# Specify quantities for indexing
ntest <- length( unique(test.agg$Transmitter) ) # number of individual tags (here just the one test tag)
nrec <- nrow(rlocs) # number of receivers
tsteps <- max(test.agg$hour)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
testY=array( NA, dim=c( ntest, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(testY) ){
h1 <- test.agg[test.agg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
testY[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,6], numeric(0)),0, h1[h1$hour==t & h1$rec==j,6])
}
}
}
## Now do the same for each tagged fish
fishdat$rec <- as.numeric(substr(fishdat$Station, 3, 4))
fishdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
fish.agg <- aggregate(count ~ Transmitter + rec + east + north + hour, fishdat, sum)
# Create a numeric identifier for each transmitter
fish.agg$tag <- as.numeric(as.factor(fish.agg$Transmitter))
# Rename hour to time for consistency when plotting below
fish.agg$time <- fish.agg$hour
# Specify quantities for indexing
nind <- length( unique(fish.agg$Transmitter) ) # number of individual tags (here just the one test tag)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
Y=array( NA, dim=c( nind, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(Y) ){
h1 <- fish.agg[fish.agg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
Y[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,6], numeric(0)),0, h1[h1$hour==t & h1$rec==j,6])
}
}
}
Y
tail(Y)
summary(Y)
summary(testY)
tsteps
fit <- COA_Standard(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=Y,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S boundary of spatial extent (receiver array + buffer)
library(TelemetrySpace)
rlocs # Receiver locations
testloc # Test tag location
head(testdat) # Hourly detection data from the test tag
head(fishdat)
buffer=1
xlim=c(min(rlocs$east-buffer),max(rlocs$east+buffer))
ylim=c(min(rlocs$north-buffer),max(rlocs$north+buffer))
# Set up a blank vector for storage
D<-NULL
# Loop over each hour
for( i in 1:nrow(testdat) ){
D[i]=distf( testloc[,c('east','north')], testdat[i,c('east','north')] )
}
testdat$D <- D # Assign to testdat data frame
# Plot to examine variation in detection rate over time
m1 <- plyr::count(testdat, c('Station','hour','D','east','north'))
#Round distance for plotting
m1$dist=round(m1$D*1000)
#Create label by merging station name and distance
m1$label=paste(m1$dist,"m","(",m1$Station,")")
#Plot
library(ggplot2)
ggplot(data=m1,aes(x=hour,y=freq))+
geom_bar(stat="identity",fill='#008080')+
facet_wrap(~as.factor(label))+
theme(text = element_text(size = 16)) +
scale_y_continuous(breaks=seq(0,30,10)) +
labs(x="Hours since deployment",y="Number of detections")
rs <- rlocs
# Add column for each time interval to indicate whether receiver was operational or not
rs[,c(4:( max(fishdat$hour)+3 ) )] <- 1
rs <- plyr::rename( rs, replace = c("V4"=1,
"V5"=2,
"V6"=3,
"V7"=4,
"V8"=5,
"V9"=6,
"V10"=7,
"V11"=8,
"V12"=9,
"V13"=10) )
# Create vector of the number of sampling occasions for each receiver
tsteps <- apply(rs[,4:ncol(rs)],1,sum)
tsteps # Will all be the same here b
testdat$rec <- as.numeric(substr(testdat$Station, 3, 4))
testdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
test.agg <- aggregate(count ~ Transmitter + rec + east + north + hour, testdat, sum)
# Create a numeric identifier for each transmitter
test.agg$tag <- as.numeric(as.factor(test.agg$Transmitter))
# Rename hour to time for consistency when plotting below
test.agg$time <- test.agg$hour
# Specify quantities for indexing
ntest <- length( unique(test.agg$Transmitter) ) # number of individual tags (here just the one test tag)
nrec <- nrow(rlocs) # number of receivers
tsteps <- max(test.agg$hour)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
testY=array( NA, dim=c( ntest, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(testY) ){
h1 <- test.agg[test.agg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
testY[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,6], numeric(0)),0, h1[h1$hour==t & h1$rec==j,6])
}
}
}
## Now do the same for each tagged fish
fishdat$rec <- as.numeric(substr(fishdat$Station, 3, 4))
fishdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
fish.agg <- aggregate(count ~ Transmitter + rec + east + north + hour, fishdat, sum)
# Create a numeric identifier for each transmitter
fish.agg$tag <- as.numeric(as.factor(fish.agg$Transmitter))
# Rename hour to time for consistency when plotting below
fish.agg$time <- fish.agg$hour
# Specify quantities for indexing
nind <- length( unique(fish.agg$Transmitter) ) # number of individual tags (here just the one test tag)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
Y=array( NA, dim=c( nind, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(Y) ){
h1 <- fish.agg[fish.agg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
Y[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,6], numeric(0)),0, h1[h1$hour==t & h1$rec==j,6])
}
}
}
fit <- COA_Standard(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=Y,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S boun
fit$Time
fit$Time/60
fit$Time/60/4
?scale
setwd("C:/Users/mwinton/Documents/TelemetrySpace")
list.files(all.files = TRUE)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE)

xlinm
xlim
buffer=1
xlim=c(min(rlocs$east-buffer),max(rlocs$east+buffer))
ylim=c(min(rlocs$north-buffer),max(rlocs$north+buffer))
D<-NULL
# Loop over each hour
for( i in 1:nrow(testdat) ){
D[i]=distf( testloc[,c('east','north')], testdat[i,c('east','north')] )
}
testdat$D <- D # Assign to testdat data frame
# Plot to examine variation in detection rate over time
m1 <- plyr::count(testdat, c('Station','hour','D','east','north'))
#Round distance for plotting
m1$dist=round(m1$D*1000)
#Create label by merging station name and distance
m1$label=paste(m1$dist,"m","(",m1$Station,")")
#Plot
library(ggplot2)
ggplot(data=m1,aes(x=hour,y=freq))+
geom_bar(stat="identity",fill='#008080')+
facet_wrap(~as.factor(label))+
theme(text = element_text(size = 16)) +
scale_y_continuous(breaks=seq(0,30,10)) +
labs(x="Hours since deployment",y="Number of detections")
testdat <- testdat[testdat$hour < 11,]
# Create a copy of the receiver locations for tallying
rs <- rlocs
# Add column for each time interval to indicate whether receiver was operational or not
rs[,c(4:( max(testdat$hour)+3 ) )] <- 1
rs <- plyr::rename( rs, replace = c("V4"=1,
"V5"=2,
"V6"=3,
"V7"=4,
"V8"=5,
"V9"=6,
"V10"=7,
"V11"=8,
"V12"=9,
"V13"=10) )
head(rs)
# Create vector of the number of sampling occasions for each receiver
tsteps <- apply(rs[,4:ncol(rs)],1,sum)
tsteps # Will all be the same here because all operational over the entire time span
# Detection record only includes non-zero events - Convert into number of detections by receiver by time step that includes zeros
# First create numeric ID for receiver
testdat$rec <- as.numeric(substr(testdat$Station, 3, 4))
testdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
testagg <- aggregate(count ~ Transmitter + rec + hour, testdat, sum)
# Create a numeric identifier for each transmitter
testagg$tag <- as.numeric(as.factor(testagg$Transmitter))
# Specify quantities for indexing
nind <- length( unique(testagg$Transmitter) ) # number of individual tags (here just the one test tag)
nrec <- nrow(rlocs) # number of receivers
tsteps <- max(testagg$hour)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
testY=array( NA, dim=c( nind, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(testY) ){
h1 <- testagg[testagg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
testY[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,4], numeric(0)),0, h1[h1$hour==t & h1$rec==j,4])
}
}
}
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim)
fit
?summary
library(rstan)
?summary
setwd("C:/Users/mwinton/Documents/TelemetrySpace")
roxygen2::roxygenise(clean=TRUE)
?install
devtools::install(local=FALSE)
testdat
library("TelemetrySpace")
rlocs # Receiver locations
testloc # Test tag location
head(testdat) # Hourly detection data from the test tag
head(fishdat)
buffer=1
xlim=c(min(rlocs$east-buffer),max(rlocs$east+buffer))
ylim=c(min(rlocs$north-buffer),max(rlocs$north+buffer))
D<-NULL
# Loop over each hour
for( i in 1:nrow(testdat) ){
D[i]=distf( testloc[,c('east','north')], testdat[i,c('east','north')] )
}
testdat$D <- D # Assign to testdat data frame
# Plot to examine variation in detection rate over time
m1 <- plyr::count(testdat, c('Station','hour','D','east','north'))
#Round distance for plotting
m1$dist=round(m1$D*1000)
#Create label by merging station name and distance
m1$label=paste(m1$dist,"m","(",m1$Station,")")
#Plot
library(ggplot2)
ggplot(data=m1,aes(x=hour,y=freq))+
geom_bar(stat="identity",fill='#008080')+
facet_wrap(~as.factor(label))+
theme(text = element_text(size = 16)) +
scale_y_continuous(breaks=seq(0,30,10)) +
labs(x="Hours since deployment",y="Number of detections")
testdat <- testdat[testdat$hour < 11,]
# Create a copy of the receiver locations for tallying
rs <- rlocs
# Add column for each time interval to indicate whether receiver was operational or not
rs[,c(4:( max(testdat$hour)+3 ) )] <- 1
rs <- plyr::rename( rs, replace = c("V4"=1,
"V5"=2,
"V6"=3,
"V7"=4,
"V8"=5,
"V9"=6,
"V10"=7,
"V11"=8,
"V12"=9,
"V13"=10) )
head(rs)
# Create vector of the number of sampling occasions for each receiver
tsteps <- apply(rs[,4:ncol(rs)],1,sum)
tsteps # Will all be the same here because all operational over the entire time span
# Detection record only includes non-zero events - Convert into number of detections by receiver by time step that includes zeros
# First create numeric ID for receiver
testdat$rec <- as.numeric(substr(testdat$Station, 3, 4))
testdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
testagg <- aggregate(count ~ Transmitter + rec + hour, testdat, sum)
# Create a numeric identifier for each transmitter
testagg$tag <- as.numeric(as.factor(testagg$Transmitter))
# Specify quantities for indexing
nind <- length( unique(testagg$Transmitter) ) # number of individual tags (here just the one test tag)
nrec <- nrow(rlocs) # number of receivers
tsteps <- max(testagg$hour)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
testY=array( NA, dim=c( nind, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(testY) ){
h1 <- testagg[testagg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
testY[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,4], numeric(0)),0, h1[h1$hour==t & h1$rec==j,4])
}
}
}
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S boun
fit
setwd("C:/Users/mwinton/Documents/TelemetrySpace")
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE)
library(TelemetrySpace)
rlocs # Receiver locations
testloc # Test tag location
head(testdat) # Hourly detection data from the test tag
head(fishdat)
xlim
buffer=1
xlim=c(min(rlocs$east-buffer),max(rlocs$east+buffer))
ylim=c(min(rlocs$north-buffer),max(rlocs$north+buffer))
D<-NULL
# Loop over each hour
for( i in 1:nrow(testdat) ){
D[i]=distf( testloc[,c('east','north')], testdat[i,c('east','north')] )
}
testdat$D <- D # Assign to testdat data frame
# Plot to examine variation in detection rate over time
m1 <- plyr::count(testdat, c('Station','hour','D','east','north'))
#Round distance for plotting
m1$dist=round(m1$D*1000)
#Create label by merging station name and distance
m1$label=paste(m1$dist,"m","(",m1$Station,")")
#Plot
library(ggplot2)
ggplot(data=m1,aes(x=hour,y=freq))+
geom_bar(stat="identity",fill='#008080')+
facet_wrap(~as.factor(label))+
theme(text = element_text(size = 16)) +
scale_y_continuous(breaks=seq(0,30,10)) +
labs(x="Hours since deployment",y="Number of detections")
testdat <- testdat[testdat$hour < 11,]
# Create a copy of the receiver locations for tallying
rs <- rlocs
# Add column for each time interval to indicate whether receiver was operational or not
rs[,c(4:( max(testdat$hour)+3 ) )] <- 1
rs <- plyr::rename( rs, replace = c("V4"=1,
"V5"=2,
"V6"=3,
"V7"=4,
"V8"=5,
"V9"=6,
"V10"=7,
"V11"=8,
"V12"=9,
"V13"=10) )
head(rs)
# Create vector of the number of sampling occasions for each receiver
tsteps <- apply(rs[,4:ncol(rs)],1,sum)
tsteps # Will all be the same here because all operational over the entire time span
# Detection record only includes non-zero events - Convert into number of detections by receiver by time step that includes zeros
# First create numeric ID for receiver
testdat$rec <- as.numeric(substr(testdat$Station, 3, 4))
testdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
testagg <- aggregate(count ~ Transmitter + rec + hour, testdat, sum)
# Create a numeric identifier for each transmitter
testagg$tag <- as.numeric(as.factor(testagg$Transmitter))
# Specify quantities for indexing
nind <- length( unique(testagg$Transmitter) ) # number of individual tags (here just the one test tag)
nrec <- nrow(rlocs) # number of receivers
tsteps <- max(testagg$hour)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
testY=array( NA, dim=c( nind, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(testY) ){
h1 <- testagg[testagg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
testY[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,4], numeric(0)),0, h1[h1$hour==t & h1$rec==j,4])
}
}
}
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) #
fit
str(fit)
fit$fit_time
summary(fit)
fit[[4]]
sum(fit[[4]])
fit[[2]]
fit[[3]]
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE)
library(TelemetrySpace)
rlocs # Receiver locations
testloc # Test tag location
head(testdat) # Hourly detection data from the test tag
head(fishdat)
buffer=1
xlim=c(min(rlocs$east-buffer),max(rlocs$east+buffer))
ylim=c(min(rlocs$north-buffer),max(rlocs$north+buffer))
D<-NULL
# Loop over each hour
for( i in 1:nrow(testdat) ){
D[i]=distf( testloc[,c('east','north')], testdat[i,c('east','north')] )
}
testdat$D <- D # Assign to testdat data frame
# Plot to examine variation in detection rate over time
m1 <- plyr::count(testdat, c('Station','hour','D','east','north'))
#Round distance for plotting
m1$dist=round(m1$D*1000)
#Create label by merging station name and distance
m1$label=paste(m1$dist,"m","(",m1$Station,")")
#Plot
library(ggplot2)
ggplot(data=m1,aes(x=hour,y=freq))+
geom_bar(stat="identity",fill='#008080')+
facet_wrap(~as.factor(label))+
theme(text = element_text(size = 16)) +
scale_y_continuous(breaks=seq(0,30,10)) +
labs(x="Hours since deployment",y="Number of detections")
testdat <- testdat[testdat$hour < 11,]
# Create a copy of the receiver locations for tallying
rs <- rlocs
# Add column for each time interval to indicate whether receiver was operational or not
rs[,c(4:( max(testdat$hour)+3 ) )] <- 1
rs <- plyr::rename( rs, replace = c("V4"=1,
"V5"=2,
"V6"=3,
"V7"=4,
"V8"=5,
"V9"=6,
"V10"=7,
"V11"=8,
"V12"=9,
"V13"=10) )
head(rs)
# Create vector of the number of sampling occasions for each receiver
tsteps <- apply(rs[,4:ncol(rs)],1,sum)
tsteps # Will all be the same here because all operational over the entire time span
# Detection record only includes non-zero events - Convert into number of detections by receiver by time step that includes zeros
# First create numeric ID for receiver
testdat$rec <- as.numeric(substr(testdat$Station, 3, 4))
testdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
testagg <- aggregate(count ~ Transmitter + rec + hour, testdat, sum)
# Create a numeric identifier for each transmitter
testagg$tag <- as.numeric(as.factor(testagg$Transmitter))
# Specify quantities for indexing
nind <- length( unique(testagg$Transmitter) ) # number of individual tags (here just the one test tag)
nrec <- nrow(rlocs) # number of receivers
tsteps <- max(testagg$hour)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
testY=array( NA, dim=c( nind, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(testY) ){
h1 <- testagg[testagg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
testY[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,4], numeric(0)),0, h1[h1$hour==t & h1$rec==j,4])
}
}
}
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S boundary of spatial extent (receiver array + buffer)
fit
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE)
library(TelemetrySpace)
rlocs # Receiver locations
testloc # Test tag location
head(testdat) # Hourly detection data from the test tag
head(fishdat)
buffer=1
xlim=c(min(rlocs$east-buffer),max(rlocs$east+buffer))
ylim=c(min(rlocs$north-buffer),max(rlocs$north+buffer))
D<-NULL
# Loop over each hour
for( i in 1:nrow(testdat) ){
D[i]=distf( testloc[,c('east','north')], testdat[i,c('east','north')] )
}
testdat$D <- D # Assign to testdat data frame
# Plot to examine variation in detection rate over time
m1 <- plyr::count(testdat, c('Station','hour','D','east','north'))
#Round distance for plotting
m1$dist=round(m1$D*1000)
#Create label by merging station name and distance
m1$label=paste(m1$dist,"m","(",m1$Station,")")
#Plot
library(ggplot2)
ggplot(data=m1,aes(x=hour,y=freq))+
geom_bar(stat="identity",fill='#008080')+
facet_wrap(~as.factor(label))+
theme(text = element_text(size = 16)) +
scale_y_continuous(breaks=seq(0,30,10)) +
labs(x="Hours since deployment",y="Number of detections")
# Test using a short (10 hour) version
testdat <- testdat[testdat$hour < 11,]
# Create a copy of the receiver locations for tallying
rs <- rlocs
# Add column for each time interval to indicate whether receiver was operational or not
rs[,c(4:( max(testdat$hour)+3 ) )] <- 1
rs <- plyr::rename( rs, replace = c("V4"=1,
"V5"=2,
"V6"=3,
"V7"=4,
"V8"=5,
"V9"=6,
"V10"=7,
"V11"=8,
"V12"=9,
"V13"=10) )
head(rs)
# Create vector of the number of sampling occasions for each receiver
tsteps <- apply(rs[,4:ncol(rs)],1,sum)
tsteps # Will all be the same here because all operational over the entire time span
# Detection record only includes non-zero events - Convert into number of detections by receiver by time step that includes zeros
# First create numeric ID for receiver
testdat$rec <- as.numeric(substr(testdat$Station, 3, 4))
testdat$count <- 1 # Add a column that indicates each record corresponds to 1 detection
# Aggregate the number of detections for each individual at each receiver in each time step
testagg <- aggregate(count ~ Transmitter + rec + hour, testdat, sum)
# Create a numeric identifier for each transmitter
testagg$tag <- as.numeric(as.factor(testagg$Transmitter))
# Specify quantities for indexing
nind <- length( unique(testagg$Transmitter) ) # number of individual tags (here just the one test tag)
nrec <- nrow(rlocs) # number of receivers
tsteps <- max(testagg$hour)
# This chunk saves the total number of encounters of each individual (rows) in each trap (cols) at each sampling occasion (array elements)
testY=array( NA, dim=c( nind, nrec, tsteps ) )
for( t in 1:max(tsteps) ){
for ( i in 1:nrow(testY) ){
h1 <- testagg[testagg$tag==i,]
for( j in 1:nrow(rlocs) ){
# If there are no detections at that receiver in that time period, set to 0; otherwise set to the number of detections
testY[i,j,t]=ifelse(identical(h1[h1$hour==t & h1$rec==j,4], numeric(0)),0, h1[h1$hour==t & h1$rec==j,4])
}
}
}
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S bounda
fit[[1]]
str(fit)
fit[1]
mods <- list(fit[1])
mods <- list(fit[1],fit[2],fit[3])
str(mods)
summary(mods)
names(mods)<-c('el1','el2','el3')
mods$el2
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE)
testY
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S bounda
library(TelemetrySpace)
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S bounda
roxygen2::roxygenise(clean=TRUE)
library("TelemetrySpace")
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S bounda
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE)
library(TelemetrySpace)
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S bounda
fit
fit$fit_time
str(fit)
names(fit)
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE)
library("TelemetrySpace")
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim) # N-S bounda
fit$fit_summary
fit[1]
fit
str(fit)
fit$fit_summary$summary
fit$fit_time
roxygen2::roxygenise(clean=TRUE)
devtools::install(local=FALSE)
library(TelemetrySpace)
fit <- COA_standard_Bayes(nind=nind, # number of individuals
nrec=nrec, # number of receivers
ntime=tsteps, # number of time steps
ntrans=30, # number of expected transmissions per tag per time interval
y=testY,   # array of detections
recX=as.vector(rlocs$east),  # E-W receiver coordinates
recY=as.vector(rlocs$north), # N-S receiver coordinates
xlim=xlim, # E-W boundary of spatial extent (receiver array + buffer)
ylim=ylim)
fit$fit_summary
fit$fit_time
summary(fit$fit_estimates)
fit$fit_estimates$`sx[1,1]`
